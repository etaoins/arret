(import [arret internal primitives])
(export def let fn if quote export defmacro letmacro macro-rules deftype lettype compile-error do =
        defrecord letrecord recur)

(import [arret internal types])
(export Any Bool Str Sym Int Float Num Char List Vector Vectorof Setof Map U Record -> ->! str? sym?
        bool? num? int? float? char? list? vector? set? map? fn? nil? record?)

(import [stdlib rust])
(export length panic panic! print! println! print-str write! writeln! write-str read-str exit! cons
        map filter some? every? fold concat take int float < <= == > >= + * - / rem quot sqrt vector
        vector-length vector->list vector-ref)

(export defn)
(defmacro defn (macro-rules
  [(destruc fn-data ...) (def destruc (fn fn-data ...))]
))

(export list)
(defn list #{A} (& [l A]) -> (List & A)
  l)

(export when)
(defmacro when (macro-rules
  [(test body-data ...) (if test (do body-data ...) ())]
))

(export when-not)
(defmacro when-not (macro-rules
  [(test body-data ...) (if test () (do body-data ...))]
))

(export cond)
(defmacro cond (macro-rules
  [() ()]
  ; Intentionally don't allow a tail here so we throw an error with unreachable clauses
  [(:else body-expr) body-expr]
  [(test-expr body-expr rest-clauses ...)
   (if test-expr
     body-expr
     (cond rest-clauses ...))]
))

(export if-not)
(defmacro if-not (macro-rules
  [(test-expr false-expr true-expr) (if test-expr true-expr false-expr)]
))

(export comment)
(defmacro comment (macro-rules
  [(_ ...) '()]
))

(export and)
(defmacro and (macro-rules
  [() true]
  [(test) test]
  [(test1 test2 ...)
   (if test1 (and test2 ...) false)]
))

(export or)
(defmacro or (macro-rules
  [() false]
  [(test) test]
  [(test1 test2 ...)
   (if test1 true (or test2 ...))]
))

(export not)
(defmacro not (macro-rules
  [(test) (if test false true)]
))

; This is a macro to support occurrence typing
(export not=)
(defmacro not= (macro-rules
  [(lhs rhs) (not (= lhs rhs))]
))

(export ann)
(defmacro ann (macro-rules
 [(val Type) (let [[_ Type] val] val)]
))

(export first)
(defn first #{T} (([v T] & _)) -> T
  v)

(export second)
(defn second #{T} ((_ [v T] & _)) -> T
  v)

(export rest)
(defn rest #{T} ((_ & [tail T])) -> (List & T)
  tail)

(export zero?)
(defn zero? ([n Num]) -> Bool
  (if (int? n)
    (= n 0)
    (= n 0.0)))

(export pos?)
(defn pos? ([n Num]) -> Bool
  (if (int? n)
    (> n 0)
    (> n 0.0)))

(export neg?)
(defn neg? ([n Num]) -> Bool
  (if (int? n)
    (< n 0)
    (< n 0.0)))

(export nan?)
(defn nan? ([f Float]) -> Bool
  (not= f f))

(export infinite?)
(defn infinite? ([f Float]) -> Bool
  (or (= f ##Inf) (= f ##-Inf)))

(export even?)
(defn even? ([v Int]) -> Bool
  (zero? (rem v 2)))

(export odd?)
(defn odd? ([v Int]) -> Bool
  (not (zero? (rem v 2))))

(export inc)
(defn inc ([i Int]) -> Int
  (+ i 1))

(export dec)
(defn dec ([i Int]) -> Int
  (- i 1))

(defmacro defextrema (macro-rules
  [(name operator)
   (defn name #{[N Num]} ([first N] & [rest N]) -> N
     (fold (fn ([acc N] [next N]) -> N
             (cond
               (and (float? next) (nan? next)) next
               (and (float? acc) (nan? acc)) acc
               (operator next acc) next
               :else acc))
           first rest))]
))


(export min)
(defextrema min <)

(export max)
(defextrema max >)

(export true?)
(defn true? ([v Any]) -> Bool
  (= true v))

(export false?)
(defn false? ([v Any]) -> Bool
  (= false v))

(export any?)
(defn any? ([_ Any]) -> true
  true)

(export identity)
(defn identity #{T} ([v T]) -> T
  v)

(export constantly)
(defn constantly #{T} ([v T]) -> (& Any -> T)
  (fn (& _) v))

; We're polymorphic over both the needle and haystack to build type-specific equality checks
(export member?)
(defn member? #{N H} ([needle N] [haystack (List & H)]) -> Bool
  (if (nil? haystack)
    false
    (or
      (= needle (first haystack))
      (recur needle (rest haystack)))))

(export drop)
(defn drop #{T} ([i Int] [l (List & T)]) -> (List & T)
  (cond
    (<= i 0) l
    (nil? l) l
    :else (recur (dec i) (rest l))))

(export drop-last)
(defn drop-last #{T} ([i Int] [l (List & T)]) -> (List & T)
  (take (- (length l) i) l))

(export ->>)
(defmacro ->> (macro-rules
  [(initial) initial]
  [(initial (first-fn args ...) rest ...)
    (->> (first-fn args ... initial) rest ...)]
))