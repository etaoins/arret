(import [stdlib base])

(def [wrong-ascription Int] 'foo)
                            ;^^^ ERROR `'foo` is not a `Int`

(def ([one 'one] [two 'two]) '(two one))
                             ;^^^^^^^^^ ERROR `(List 'two 'one)` is not a `(List 'one 'two)`

(defn wrong-ret () -> Str
  'foo)
  ;^^^ ERROR `'foo` is not a `Str`

(def non-bool-if-test (if 'foo true false))
                          ;^^^ ERROR `'foo` is not a `Bool`

(defn wrong-if-branch-type ([test Bool]) -> Sym
  (if test
    'foo
    "foo"))
   ;^^^^^ ERROR `Str` is not a `Sym`

(def [wrong-do-type Int]
  (do 1 2 'three))
          ;^^^^^ ERROR `'three` is not a `Int`

(def wrong-arg-type
  ((fn ([input Str])) 'foo))
                      ;^^^ ERROR `'foo` is not a `Str`

(defn conflicting-free-type (free-input)
  (ann free-input Str)
  (ann free-input Sym))
      ;^^^^^^^^^^ ERROR inferred conflicting types `Sym` and `Str`

; `input` will gain type information from the function type annotation
(def [conflicting-closure-type (Sym -> Str)]
  (fn (input) (ann input Str)))
                  ;^^^^^ ERROR inferred conflicting types `Str` and `Sym

(def not-fun-def ("foo"))
                 ;^^^^^ ERROR `Str` is not a function

(defn impure-fun! () ->! ())
(def impure-def (impure-fun!))
                ;^^^^^^^^^^^ ERROR function of type `(->! ())` is not pure

(defn impure-app () -> ()
  (impure-fun!))
  ;^^^^^^^^^^^ ERROR function of type `(->! ())` is not pure

(defn polymorphic-impure-app #{[->A ->!]} () ->A ()
  (impure-fun!))
  ;^^^^^^^^^^^ ERROR function of type `(->! ())` is not `->A`

(defn bad-apply-in-return-position () -> ()
  (length '(1 2 3)))
  ;^^^^^^ ERROR `((List & Any) -> Int)` is not a `(... -> ())

(defn non-list-rest-type (& x)
  (ann x (Vector Any)))
      ;^ ERROR `(Vector Any)` is not a `(List & Any)`

(defn specific-rest-list-type (& x)
  (ann x (List Int Int Int)))
      ;^ ERROR `(List & Int)` is not a `(List Int Int Int)`

; The compiler should suppress this error as it's a cascade error
(def depends-on-type-error specific-rest-list-type)

; This generic parameter isn't sufficiently bound
(defn takes-symbol ([x Sym]))
(defn takes-generic #{T} ([x T])
  (takes-symbol x))
               ;^ ERROR `T` is not a `Sym`

; Applying a fun with incorrect polymorphic purity inside a pure context
(def _ (map println! '(0 1 2 3)))
           ;^^^^^^^^ ERROR `(& Any ->! ())` is not a `(Int -> Any)`

; `input` is used both as a poly `Sym` and a poly `Num`
(defn conflicting-poly-types #{[A Sym] [B Num]} (input
                                                 [sym-is-foo? (A -> Bool)]
                                                 [num-is-zero? (B -> Bool)]) -> ()
  (sym-is-foo? input)
  (num-is-zero? input)
               ;^^^^^ ERROR inferred conflicting types `B` and `A`
  ())

(defn unselected-purity-variable ()
  ((fn #{[->_ ->!]} ()))
 ;^^^^^^^^^^^^^^^^^^^^^^ ERROR cannot determine purity of purity variable `->_` in this context
  ())

(defn unselected-type-variable ()
  ((fn #{T} ()))
 ;^^^^^^^^^^^^^^ ERROR cannot determine type of type variable `T` in this context
  ())

(defn main! ())