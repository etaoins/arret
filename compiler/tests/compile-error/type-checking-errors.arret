(import [stdlib base])

(def [wrong-ascription Int] 'foo)
                            ;^^^ ERROR mismatched types

(def ([one 'one] [two 'two]) '(two one))
                             ;^^^^^^^^^ ERROR mismatched types

(defn wrong-ret () -> Str
  'foo)
  ;^^^ ERROR mismatched types

(def non-bool-if-test (if 'foo true false))
                          ;^^^ ERROR mismatched types

(defn wrong-if-branch-type ([test Bool]) -> Sym
  (if test
    'foo
    "foo"))
   ;^^^^^ ERROR mismatched types

(def [wrong-do-type Int]
  (do 1 2 'three))
          ;^^^^^ ERROR mismatched types

(def wrong-arg-type
  ((fn ([input Str])) 'foo))
                      ;^^^ ERROR mismatched types

(defn conflicting-free-type (free-input)
  (ann free-input Str)
  (ann free-input Sym))
      ;^^^^^^^^^^ ERROR type annotation needed

; `input` will gain type information from the function type annotation
(def [conflicting-closure-type (Sym -> Str)]
  (fn (input) (ann input Str)))
                  ;^^^^^ ERROR type annotation needed

(def not-fun-def ("foo"))
                 ;^^^^^ ERROR expected function, found `Str`

(defn impure-fun! () ->! ())
(def impure-def (impure-fun!))
                ;^^^^^^^^^^^ ERROR mismatched purities

(defn impure-app () -> ()
  (impure-fun!))
  ;^^^^^^^^^^^ ERROR mismatched purities

(defn polymorphic-impure-app #{[->A ->!]} () ->A ()
  (impure-fun!))
  ;^^^^^^^^^^^ ERROR mismatched purities

(defn bad-apply-in-return-position () -> ()
  (length '(1 2 3)))
  ;^^^^^^ ERROR mismatched types

(defn non-list-rest-type (& x)
  (ann x (Vector Any)))
      ;^ ERROR mismatched types

(defn specific-rest-list-type (& x)
  (ann x (List Int Int Int)))
      ;^ ERROR mismatched types

; The compiler should suppress this error as it's a cascade error
(def depends-on-type-error specific-rest-list-type)

; This generic parameter isn't sufficiently bound
(defn takes-symbol ([x Sym]))
(defn takes-generic #{T} ([x T])
  (takes-symbol x))
               ;^ ERROR mismatched types

; Applying a fun with incorrect polymorphic purity inside a pure context
(def _ (map println! '(0 1 2 3)))
           ;^^^^^^^^ ERROR mismatched types

; `input` is used both as a poly `Sym` and a poly `Num`
(defn conflicting-poly-types #{[A Sym] [B Num]} (input
                                                 [sym-is-foo? (A -> Bool)]
                                                 [num-is-zero? (B -> Bool)]) -> ()
  (sym-is-foo? input)
  (num-is-zero? input)
               ;^^^^^ ERROR type annotation needed
  ())

(defn unselected-purity-variable ()
  ((fn #{[->_ ->!]} ()))
 ;^^^^^^^^^^^^^^^^^^^^^^ ERROR cannot determine purity of purity variable `->_`
  ())

(defn unselected-type-variable ()
  ((fn #{T} ()))
 ;^^^^^^^^^^^^^^ ERROR cannot determine type of type variable `T`
  ())

; Make sure we still type check the branches
(defn divergent-cond-test () -> Sym
  (if (panic "Divergent")
    ; This isn't a `Sym` but we should allow it as it's never returned
    true
    ; This isn't well-typed because a test must be a `Bool`
    (if 'foo 1 2)))
        ;^^^ ERROR mismatched types

(defrecord RecordOne (record1))
(defrecord RecordTwo (record2))
(defrecord RecordThree (record3))

; Make sure we don't unify this to `Record`
(def [_ (U RecordOne RecordTwo)] (record3))
                                 ;^^^^^^^ ERROR mismatched types

(defn main! ())