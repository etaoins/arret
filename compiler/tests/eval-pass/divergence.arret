(import [stdlib base])
(import [stdlib test])

; This needs a `(do)` wrapper otherwise reverse type propagation will complain about `expr` not
; returning `(U)` before fully evaluating it. Real code shouldn't be expecting `(U)` so it would be
; unaffected.
(defmacro assert-diverges (macro-rules
 [(expr) (ann (do expr '()) (U))]
))

; This isn't `(main!)` to make sure it doesn't acually run
(defn compile-only ([x Bool])
  ; Direct divergence
  (assert-diverges (panic "Hello"))

  ; Divergence within a `(do)`
  (assert-diverges (do (panic "(do)") 1 2))

  ; Divergence within `(if)` branches
  (assert-diverges
    (if x
      (do (panic "Left") 'left)
      (do (panic "Right") 'right)))

  ; Divergence within `(if)` condition
  (assert-diverges (if (panic "Test") 'left 'right))
  (assert-diverges (if (do (panic "Test") true) 'left 'right))
  (assert-diverges (if (do (panic "Test") false) 'left 'right))
  (ann (if true 'left (panic "Test")) 'left)
  (ann (if false (panic "Test") 'right) 'right)
  (ann (if x 'other (panic "Test")) 'other)

  ; Divergence within normal application
  (assert-diverges (length (panic "Normal apply")))

  ; Divergence within type predicate
  (assert-diverges (str? (panic "Type predicate apply")))

  ; Divergence within equality predicate
  (assert-diverges (= true (panic "Type predicate apply")))

  ; Divergence within `(let)`
  (assert-diverges (let [_ (panic "(let)")])))

(defn always-panics () -> (U)
  (panic "This panics!"))

(defn panics-inside-let () -> Int
  (let [_ (panic "This panics!")])
  5)

(defn panics-inside-cond () -> Int
  ; This is tricky because our typeck doesn't know this is constant but `eval_hir` does
  (if (= 0 1)
    ()
    (panic "HERE"))
  5)

(defn panics-inside-app () -> (Listof Any)
  (list (panic "HERE") 2 3))

(defn main! () ->! ()
  ; Boxing these should not panic us
  (black-box! panic)
  (black-box! always-panics)
  (black-box! panics-inside-let)
  (black-box! panics-inside-cond)
  (black-box! panics-inside-app)
  
  ())