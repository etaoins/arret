(import [stdlib base])

(defn test-type-in-branches ([test Bool])
  (if test
    (ann test true)
    (ann test false)))

(defn trivial-type-predicate ([input (U Sym Str)])
  (if (sym? input)
    (ann input Sym)
    (ann input Str)))

(defn non-literal-equality-predicate ([input (U Int Float)])
  (if (= input 123)
    (ann input Int)
    (ann input (U Int Float))))

(defn literal-equality-predicate ([input (U 'foo 'bar)])
  (if (= input 'foo)
    (ann input 'foo)
    (ann input 'bar)))

(defn two-var-equality-predicate ([left (U 'foo 'bar)] [right (U 'bar 'baz)])
  (when (= left right)
    (ann left 'bar)
    (ann right 'bar)))

(defn let-preserves-type-information ([input Bool])
  (if (let [_ ()] 'foo input)
    (ann input true)
    (ann input false)))

(defn same-var-and-typing ([lst (U (List & Any) false)]) -> (U Any false)
  (if (and (list? lst) (not (nil? lst)))
    (first lst)
    false))

(defn two-var-and-typing ([left Num] [right Num])
  (when (and (int? left) (float? right))
    (ann left Int)
    (ann right Float)))

(defn or-typing ([input (U Sym Str Int)])
  (if (or (sym? input) (str? input))
    (ann input (U Sym Str))
    (ann input (U Sym Str Int))))

(defn not-typing ([input (U Sym Str)])
  (if (not (str? input))
    (ann input Sym)
    (ann input Str)))

(defn unbounded-generic-typing #{T} ([input T]) -> T
  (if (str? input)
    (ann input Str)
    input))

(defn bounded-generic-typing #{[T Num]} ([input T]) -> T
  (if (float? input)
    (ann input Float)
    (ann input Int)))

(defn main! ())