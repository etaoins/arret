(import [stdlib base])

(defn test-type-in-branches ([test : Bool])
  (if test
    (ann test true)
    (ann test false)))

(defn trivial-type-predicate ([input : (U Sym Str)])
  (if (sym? input)
    (ann input Sym)
    (ann input Str)))

(defn let-preserves-type-information ([input : Bool])
  (if (let [_ ()] 'foo input)
    (ann input true)
    (ann input false)))

(defn and-typing ([input : (Listof Any)])
  (if (and (list? input) (empty? input))
    (ann input ())
    (ann input (List Any Any ...))))

(defn or-typing ([input : (U Sym Str Int)])
  (if (or (sym? input) (str? input))
    (ann input (U Sym Str))
    (ann input (U Sym Str Int))))

(defn not-typing ([input : (U Sym Str)])
  (if (not (str? input))
    (ann input Sym)
    (ann input Str)))

(defn main! ())