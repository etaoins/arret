(import [stdlib base])
(import [stdlib test])

(defn test-length ()
  (assert-eq 0 (length ()))
  (assert-eq 4 (length '(1 2 3 4)))
  (assert-eq 4 (length (black-box! '(1 2 3 4))))
  (assert-eq 3 (length (list 1 2 3))))

(defn test-first-rest ()
  (assert-eq 'one (ann (first '(one two three)) 'one))
  (assert-eq '(two three) (ann (rest '(one two three)) (Listof Sym)))
  ; TODO: The type of this is `(Listof Any)`. Can this be more specific?
  (assert-eq () (rest '(one))))

(defn test-cons ()
  (assert-eq '(1) (cons 1 '()))
  (assert-eq '((1 2) 3) (cons '(1 2) '(3))))

(defn test-map ()
  (assert-eq '() (map (fn (x) x) '()))
  (assert-eq '(1 2 3 4 5) (map (fn (x) x) '(1 2 3 4 5)))
  (assert-eq '(0 1 2 3) (map #(length %) '(() (1) (1 2) (1 2 3))))
  (assert-eq '(4 4 4) (map (fn (x) 4) '(1 2 3)))
  (assert-eq '(() () ()) (map (fn (x) ()) '(1 2 3)))
  (assert-eq '(true false true) (map #(= % "yes") '("yes" "no" "yes")))

  ; This should be safe because `panic` won't be called
  (map panic '()))

(defn test-filter ()
  (assert-eq '() (filter (fn (x) true) '()))
  (assert-eq '() (filter (fn (x) false) '()))

  (assert-eq '(1 2 3) (filter (fn (x) true) '(1 2 3)))
  (assert-eq '() (filter (fn (x) false) '(1 2 3)))

  (assert-eq '(true true) (filter (fn (x) x) '(true false true false)))

  (assert-eq '(3) (filter #(= % 3) '(1 2 3 4))))

(defn test-fold ()
  (assert-eq 7 (fold + 1 '(1 2 3)))
  (assert-eq 5.0 (fold + -1.0 '(1.0 2.0 3.0))))

(defn test-concat ()
  (assert-eq '() (concat))
  (assert-eq '(1 2 3) (concat '(1 2 3)))
  (assert-eq '(1 2 3 4 5 6) (concat '(1 2 3) '() '(4 5 6))))

(defn test-member ()
  (assert-eq false (member? 1 '()))
  (assert-eq true (member? 1 '(1 2 3)))
  (assert-eq true (member? 1 '(3 2 1)))
  (assert-eq false (member? 1 '(4 5 6)))
  (assert-eq false (member? ##NaN '(1 2 ##NaN))))

(defn test-threading ()
  (assert-eq '(3 5 7 9)
    (->> '(0 1 2 3 4)
      ; Make sure these are run in the correct order
      (map #(* % 2))
      (filter #(not (zero? %)))
      (map #(+ % 1)))))

(defn main! () ->! ()
  (test-length)
  (test-first-rest)
  (test-cons)
  (test-map)
  (test-filter)
  (test-fold)
  (test-concat)
  (test-member)
  (test-threading)

  ())