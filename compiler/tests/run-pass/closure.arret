(import [stdlib base])
(import [stdlib test])

(defn return-const (x) (fn () x))

(defn generic-return-const #{T} ([x T]) -> (-> T)
  (fn () -> T x))

; This would have an inline record struct closure
(defn return-two-int-values ([one Int] [two Int]) -> (-> (List & Int))
  (fn () (list one two)))

; This would have a large record struct closure
(defn return-four-int-values ([one Int] [two Int] [three Int] [four Int]) -> (-> (List & Int))
  (fn () (list one two three four)))

; This recaptures a closure pointing to a value that's fallen out of scope
(defn recapture-inner-temporary! () ->! ()
  (black-box! (let
    [captures-inner (let
                     [inner (black-box! 4)]
                     (fn () inner))]
    (fn () captures-inner)))

  ())

(defn main! () ->! ()
  (assert-eq! true (fn? (black-box! return-const)))
  (assert-eq! 1 ((return-const 1)))
  (assert-eq! 2 (((black-box! return-const) 2)))
  (assert-eq! 3 ((return-const (black-box! 3))))
  (assert-eq! 4 (((black-box! return-const) (black-box! 4))))

  (assert-eq! true (fn? (black-box! generic-return-const)))
  (assert-eq! 1 ((generic-return-const 1)))
  (assert-eq! 2 (((black-box! generic-return-const) 2)))
  (assert-eq! 3 ((generic-return-const (black-box! 3))))
  (assert-eq! 4 (((black-box! generic-return-const) (black-box! 4))))

  (assert-eq! '(123 456) ((black-box!
    (return-two-int-values (black-box! 123) (black-box! 456)))))

  (assert-eq! '(1 2 3 4) ((black-box!
    (return-four-int-values (black-box! 1) (black-box! 2) (black-box! 3) (black-box! 4)))))

  (recapture-inner-temporary!))