(import [stdlib base])
(import [stdlib test])

(defn recursive-reverse #{T} ([lst (Listof T)]) -> (Listof T)
  (if (nil? lst)
    lst
    (concat (recursive-reverse (rest lst)) (list (first lst)))))

(defn even-length? ([l (Listof Any)]) -> Bool
  (if (nil? l)
    true
    (let [tail (rest l)]
      (if (nil? tail)
        false
        (even-length? (rest tail))))))

(defn main! () ->! ()
  (assert-eq '() ((black-box! recursive-reverse) '()))
  (assert-eq '(()) ((black-box! recursive-reverse) (black-box! '(()))))
  (assert-eq '("three" "two" "one") (recursive-reverse (black-box! '("one" "two" "three"))))
  (assert-eq '(7 6 5 4 3 2 1) (recursive-reverse '(1 2 3 4 5 6 7)))

  (assert-eq true (even-length? '()))
  (assert-eq false (even-length? (black-box! '(1))))
  (assert-eq true ((black-box! even-length?) '(1 2)))
  (assert-eq false ((black-box! even-length?) (black-box! '(1 2 3))))
  (assert-eq true (even-length? '(1 2 3 4)))

  ; We should select an ABI for `even-length?` which doesn't require allocaton
  (let [black-box-list (black-box! '(1 2 3 4 5))
        (alloc-count is-even) (heap-alloc-count (fn () (even-length? black-box-list)))]
    (assert-eq 0 alloc-count)
    (assert-eq false is-even))

  ())
