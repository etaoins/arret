(import [stdlib base])
(import [stdlib test])

(defn recursive-reverse #{T} ([lst : (Listof T)]) -> (Listof T)
  (if (nil? lst)
    lst
    (concat (recursive-reverse (rest lst)) (list (first lst)))))

(defn even-length? ([l : (Listof Any)]) -> Bool
  (if (nil? l)
    true
    (let [tail (rest l)]
      (if (nil? tail)
        false
        (even-length? (rest tail))))))

(defn main! () ->! ()
  ; TODO: If either the fun or arg are black boxed we crash for a different reason
  (assert-eq '(7 6 5 4 3 2 1) (recursive-reverse '(1 2 3 4 5 6 7)))

  (assert-eq true (even-length? '()))
  (assert-eq false ((black-box! even-length?) '(1)))
  (assert-eq true ((black-box! even-length?) '(1 2)))
  (assert-eq false (even-length? '(1 2 3)))

  ())