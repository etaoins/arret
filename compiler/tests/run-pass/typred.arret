(import [stdlib base])
(import [stdlib test])

(defn test-tagged-ty-preds! () ->! ()
  (assert-eq! true (any? (black-box-untyped! "foo")))
  (assert-eq! true (any? (black-box-untyped! 'foo)))
  (assert-eq! true (any? (black-box-untyped! :foo)))
  (assert-eq! true (any? (black-box-untyped! 1)))
  (assert-eq! true (any? (black-box-untyped! 2.0)))

  (assert-eq! true (str? (black-box-untyped! "foo")))
  (assert-eq! false (str? (black-box-untyped! 123)))

  (assert-eq! false (sym? (black-box-untyped! "foo")))
  (assert-eq! true (sym? (black-box-untyped! 'foo)))
  (assert-eq! true (sym? (black-box-untyped! :foo)))

  (assert-eq! true (true? (black-box-untyped! true)))
  (assert-eq! false (true? (black-box-untyped! false)))
  (assert-eq! false (true? (black-box-untyped! 123)))

  (assert-eq! false (false? (black-box-untyped! true)))
  (assert-eq! true (false? (black-box-untyped! false)))
  (assert-eq! false (false? (black-box-untyped! 123)))

  (assert-eq! true (bool? (black-box-untyped! true)))
  (assert-eq! false (bool? (black-box-untyped! 123)))

  (assert-eq! true (num? (black-box-untyped! 123)))
  (assert-eq! true (num? (black-box-untyped! -456.7)))
  (assert-eq! false (num? (black-box-untyped! "twelve")))

  (assert-eq! true (int? (black-box-untyped! 123)))
  (assert-eq! false (int? (black-box-untyped! false)))

  (assert-eq! true (fn? (black-box-untyped! cons)))
  (assert-eq! false (fn? (black-box-untyped! 123)))

  (assert-eq! true (list? (black-box-untyped! '())))
  (assert-eq! true (list? (black-box-untyped! '(1 2 3))))
  (assert-eq! false (list? (black-box-untyped! 123)))

  (assert-eq! true (nil? (black-box-untyped! '())))
  (assert-eq! false (nil? (black-box-untyped! '(1 2 3))))
  (assert-eq! false (nil? (black-box-untyped! 123)))

  (assert-eq! true ((black-box! str?) (black-box-untyped! "foo")))
  (assert-eq! false ((black-box! str?) (black-box-untyped! 123)))

  ; Make sure type predicates can be treatred as first-class functions
  (assert-eq! '(true false true) (map int? '(1 2.0 3)))
  (assert-eq! '(true false true) (map (black-box! int?) '(1 2.0 3)))
  (assert-eq! '(true false true) ((black-box! map) int? '(1 2.0 3))))

(defn test-record-ty-preds! () ->! ()
  (letrecord [RecordOne (record-one) RecordTwo (record-two)]
    (let [record-one-instance (record-one)
          record-two-instance (record-two)
          record-number (fn ([r (U RecordOne RecordTwo)]) -> Int
            (if (record-one? r) 1 2))]

      (assert-eq! true (record? record-one-instance))
      (assert-eq! true (record? (black-box! record-one-instance)))

      (assert-eq! true (record-one? record-one-instance))
      (assert-eq! false (record-two? record-one-instance))
      (assert-eq! false (record-one? 123))

      (assert-eq! true (record-one? (black-box-untyped! record-one-instance)))
      (assert-eq! false (record-two? (black-box-untyped! record-one-instance)))
      (assert-eq! false (record-two? (black-box-untyped! 123)))

      (assert-eq! 1 (record-number (black-box! record-one-instance)))
      (assert-eq! 2 (record-number (black-box! record-two-instance))))))

(defn main! () ->! ()
  (test-tagged-ty-preds!)
  (test-record-ty-preds!))