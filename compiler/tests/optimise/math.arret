(import [stdlib base])
(import [stdlib test])

(defn main! ()
  ; This should just pass the value through directly
  (assert-fn-doesnt-contain-op :call (fn ([n Num])
    (+ (* n))))

  ;
  ; These should all be converted to MIR ops
  ;

  (assert-fn-doesnt-contain-op :call (fn ([left Int] [right Int])
    (+ left right)))

  (assert-fn-doesnt-contain-op :call (fn ([left Int] [right Float])
    (+ left right)))

  (assert-fn-doesnt-contain-op :call (fn ([left Float] [right Float])
    (+ left right)))

  (assert-fn-doesnt-contain-op :call (fn ([left Int] [right Int])
    (* left right)))

  (assert-fn-doesnt-contain-op :call (fn ([left Int] [right Float])
    (* left right)))

  (assert-fn-doesnt-contain-op :call (fn ([left Float] [right Float])
    (* left right)))

  (assert-fn-doesnt-contain-op :call (fn ([value Int])
    (- value)))

  (assert-fn-doesnt-contain-op :call (fn ([value Float])
    (- value)))

  (assert-fn-doesnt-contain-op :call (fn ([left Int] [right Int])
    (- left right)))

  (assert-fn-doesnt-contain-op :call (fn ([left Int] [right Float])
    (- left right)))

  (assert-fn-doesnt-contain-op :call (fn ([left Float] [right Float])
    (- left right)))

  (assert-fn-doesnt-contain-op :call (fn ([value Float])
    (/ value)))

  (assert-fn-doesnt-contain-op :call (fn ([left Float] [right Float])
    (/ left right)))

  ())