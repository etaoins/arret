(import [stdlib base])
(import [stdlib test])

(defmacro assert-native-compare-fn! (macro-rules
  [(f)
    (do
      (assert-fn-doesnt-contain-op! :call f)
      (assert-fn-doesnt-contain-op! :const-box f)
      (assert-fn-doesnt-contain-op! :alloc-boxed f))]))

(defn main! () ->! ()
  ; This requires calling in to the runtime
  (assert-fn-contains-op! :call (fn ([left Any] [right Any]) -> Bool
    (= left right)))

  ; Ints can be directly compared
  (assert-native-compare-fn! (fn ([left Int] [right Int]) -> Bool
    (= left right)))

  ; Floats can be directly compared
  (assert-native-compare-fn! (fn ([left Float] [right Float]) -> Bool
    (= left right)))

  ; Bools can be directly compared
  (assert-native-compare-fn! (fn ([left Bool] [right Bool]) -> Bool
    (= left right)))

  ; Chars can be directly compared
  (assert-native-compare-fn! (fn ([left Char] [right Char]) -> Bool
    (= left right)))

  ; This should be optimised away entirely
  (assert-fn-doesnt-contain-op! :reg-op (fn ([v Bool]) -> Bool
    (= true v)))

  ; Syms can be directly compared
  (assert-native-compare-fn! (fn ([left Sym] [right Sym]) -> Bool
    (= left right)))

  ; Fns can be constantly compared because they're always inequal
  (assert-fn-returns-constant! (fn ([left (... -> Any)] [right (... -> Any)]) -> Bool
    (= left right)))

  ; Records can be compared fieldwise
  (letrecord [OneField (one-field [one Int])]
    ; TODO: Track record types through function args so these can take records
    (assert-native-compare-fn! (fn ([left Int] [right Int]) -> Bool
      (= (one-field left) (one-field right)))))

  ; If one field compares false the entire comparison is false
  (letrecord [TwoField (two-field [one Int] [two Bool])]
    (assert-fn-returns-constant! (fn ([left Int] [right Int]) -> Bool
      (= (two-field left true) (two-field right false))))))