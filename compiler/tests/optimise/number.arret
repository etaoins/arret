(import [stdlib base])
(import [stdlib test])

(defn main! () ->! ()
  ; This should be the identity function for `Int`
  (assert-fn-doesnt-contain-op! :call (fn ([i Int])
    (int i)))

  ; This should be the identity function for `Float`
  (assert-fn-doesnt-contain-op! :call (fn ([f Float])
    (float f)))

  ; We can build specific MIR ops for these
  (assert-fn-doesnt-contain-op! :call (fn ([i Int])
    (float i)))
  (assert-fn-doesnt-contain-op! :call (fn ([n Num])
    (float n)))

  ; Single arguments should be optimised to true for comparisons
  (assert-fn-doesnt-contain-op! :call (fn ([i Int])
    (< i)))
  (assert-fn-doesnt-contain-op! :call (fn ([n Num])
    (<= n)))
  (assert-fn-doesnt-contain-op! :call (fn ([f Float])
    (== f)))
  (assert-fn-doesnt-contain-op! :call (fn ([i Int])
    (>= i)))
  (assert-fn-doesnt-contain-op! :call (fn ([f Float])
    (> f)))
    
  ; These can generate comparison MIR ops
  (assert-fn-doesnt-contain-op! :call (fn ([i1 Int] [i2 Int])
    (< i1 i2)))
  (assert-fn-doesnt-contain-op! :call (fn ([f1 Float] [i2 Int])
    (<= f1 i2)))
  (assert-fn-doesnt-contain-op! :call (fn ([i1 Int] [f2 Float])
    (== i1 f2)))
  (assert-fn-doesnt-contain-op! :call (fn ([f1 Float] [f2 Float])
    (>= f1 f2)))
  (assert-fn-doesnt-contain-op! :call (fn ([i1 Int] [f2 Float] [i3 Int])
    (> i1 f2 i3))))